-- =====================================================================
-- ESQUEMA DE BASE DE DATOS - INTEGRACIÓN CON MICROSERVICIOS
-- Sistema Contratos Proveedores EPS
-- 
-- ARQUITECTURA:
-- - Esquema convenio: Datos desde microservicio "consulta-convenios"
-- - Esquema proveedor: Datos desde microservicio "consulta-proveedor" 
-- - Esquema contrato: Tablas core almacenadas localmente
-- - IDs: Generados externamente desde pipeline (ULID)
-- =====================================================================

-- Configuración inicial
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;

PRINT '======================================================================';
PRINT 'CREANDO ESQUEMAS Y TABLAS - CONTRATOS PROVEEDORES CON MICROSERVICIOS';
PRINT 'Arquitectura: Esquemas por microservicio + Tablas core locales';
PRINT 'IDs: Generados externamente desde pipeline (ULID)';
PRINT 'Fecha: ' + CONVERT(VARCHAR, GETDATE(), 120);
PRINT '======================================================================';

-- =====================================================================
-- CREAR ESQUEMAS POR MICROSERVICIO
-- =====================================================================

-- Esquema para microservicio consulta-convenios
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'convenio')
BEGIN
    EXEC('CREATE SCHEMA convenio');
    PRINT '✅ Esquema convenio creado';
END
ELSE
    PRINT '⚠️  Esquema convenio ya existe';

-- Esquema para microservicio consulta-proveedor
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'proveedor')
BEGIN
    EXEC('CREATE SCHEMA proveedor');
    PRINT '✅ Esquema proveedor creado';
END
ELSE
    PRINT '⚠️  Esquema proveedor ya existe';

-- Esquema para tablas core de contratos
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'contrato')
BEGIN
    EXEC('CREATE SCHEMA contrato');
    PRINT '✅ Esquema contrato creado';
END
ELSE
    PRINT '⚠️  Esquema contrato ya existe';

-- Esquema para logs y auditoría
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'auditoria')
BEGIN
    EXEC('CREATE SCHEMA auditoria');
    PRINT '✅ Esquema auditoria creado';
END
ELSE
    PRINT '⚠️  Esquema auditoria ya existe';

-- =====================================================================
-- TABLA TIPO CONTRATO (Local - Core del negocio)
-- Esquema: contrato
-- =====================================================================

CREATE TABLE contrato.Tip_TipoContrato (
    tipoContratoId              NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    tipoContrato                INT NOT NULL,
    descripContrato             NVARCHAR(255) NOT NULL,
    descripcionResumidaContrato NVARCHAR(100) NULL,
    codContratoSEPS            NVARCHAR(10) NULL,
    DescripMecanismoPago       NVARCHAR(255) NULL,
    codSUNASA                  NVARCHAR(5) NULL,
    estRegistro                NVARCHAR(1) NOT NULL DEFAULT 'V',
    codSistema                 NVARCHAR(5) NOT NULL,
    codCompania                NVARCHAR(6) NOT NULL,
    fechaEstado                NVARCHAR(15) NULL,
    codUsuarioCreadorSistema   NVARCHAR(15) NULL,
    fecCreacionsSistema        DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdateSistema    NVARCHAR(15) NULL,
    fecUpdateSistema           DATETIME NULL,
    codUsuarioCreador          NVARCHAR(15) NOT NULL,
    fecCreacion                DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdate           NVARCHAR(15) NULL,
    fecUpdate                  DATETIME NULL,
    
    CONSTRAINT PK_Tip_TipoContrato PRIMARY KEY (tipoContratoId),
    CONSTRAINT UK_Tip_TipoContrato_Codigo UNIQUE (tipoContrato, codSistema, codCompania),
    CONSTRAINT CK_Tip_TipoContrato_EstRegistro CHECK (estRegistro IN ('V', 'H', 'A')),
    CONSTRAINT CK_Tip_TipoContrato_Sistema CHECK (codSistema IN ('ACSEL', 'INSIS', 'NVS')),
    CONSTRAINT CK_Tip_TipoContrato_Compania CHECK (codCompania IN ('20002', '40004'))
);

-- =====================================================================
-- TABLAS DE REFERENCIA PARA MICROSERVICIOS
-- =====================================================================

-- TABLA DE REFERENCIA DE BENEFICIOS (Compatible con convenio.Mae_Beneficio)
-- Esquema: convenio
CREATE TABLE convenio.Mae_BeneficioRef (
    idBeneficio                 NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    idGrupoBeneficio           NVARCHAR(MAX) NULL,
    idTipoCobertura            NVARCHAR(MAX) NULL,
    idSubtipoCobertura         NVARCHAR(MAX) NULL,
    codBeneficio               NVARCHAR(MAX) NULL,
    descripcion                NVARCHAR(MAX) NULL,
    desResumida                NVARCHAR(MAX) NULL,
    codGrupoBeneficio          NVARCHAR(MAX) NULL,
    codCobertura               NVARCHAR(MAX) NULL,
    subtipoCobert              NVARCHAR(MAX) NULL,
    -- Metadatos de sincronización con microservicio
    ultimaActualizacion        DATETIME NOT NULL DEFAULT GETDATE(),
    estadoSincronizacion       NVARCHAR(1) NOT NULL DEFAULT 'V', -- V=Vigente, P=Pendiente, E=Error
    intentosSync               INT NOT NULL DEFAULT 0,
    errorSync                  NVARCHAR(500) NULL,
    -- Campos estándar de auditoría (compatibles con Mae_Beneficio)
    estRegistro                NVARCHAR(MAX) NULL,
    codSistema                 NVARCHAR(MAX) NULL,
    compania                   NVARCHAR(MAX) NULL,
    codUsuarioCreadorSistema   NVARCHAR(MAX) NULL,
    fecCreacionSistema         DATETIME NULL,
    codUsuarioUpdateSistema    NVARCHAR(MAX) NULL,
    fecUpdateSistema           DATETIME NULL,
    codUsuarioCreador          NVARCHAR(MAX) NULL,
    fecCreacion                DATETIME NULL,
    codUsuarioUpdate           NVARCHAR(MAX) NULL,
    fecUpdate                  DATETIME NULL,
    
    CONSTRAINT PK_Mae_BeneficioRef PRIMARY KEY (idBeneficio)
);

-- TABLA DE REFERENCIA DE PROVEEDORES
-- Esquema: proveedor
CREATE TABLE proveedor.Mae_ProveedorRef (
    idProveedor                 NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    CodigoProveedor             INT NOT NULL,
    -- Campos mínimos para referencias y cache
    RazonSocial                 NVARCHAR(MAX) NULL,
    TipoProveedor               NVARCHAR(MAX) NULL,
    ruc                         NVARCHAR(MAX) NULL,
    -- Metadatos de sincronización con microservicio
    ultimaActualizacion         DATETIME NOT NULL DEFAULT GETDATE(),
    estadoSincronizacion        NVARCHAR(1) NOT NULL DEFAULT 'V',
    intentosSync                INT NOT NULL DEFAULT 0,
    errorSync                   NVARCHAR(500) NULL,
    -- Campos estándar de auditoría
    estRegistro                 NVARCHAR(MAX) NULL,
    codSistema                  NVARCHAR(MAX) NULL,
    compania                    NVARCHAR(MAX) NULL,
    codUsuarioCreadorSistema    NVARCHAR(MAX) NULL,
    fecCreacionSistema          DATETIME NULL,
    codUsuarioUpdateSistema     NVARCHAR(MAX) NULL,
    fecUpdateSistema            DATETIME NULL,
    codUsuarioCreador           NVARCHAR(MAX) NULL,
    fecCreacion                 DATETIME NULL,
    codUsuarioUpdate            NVARCHAR(MAX) NULL,
    fecUpdate                   DATETIME NULL,
    
    CONSTRAINT PK_Mae_ProveedorRef PRIMARY KEY (idProveedor)
);

-- TABLA DE REFERENCIA DE SUCURSALES DE PROVEEDORES
-- Esquema: proveedor
CREATE TABLE proveedor.Mae_ProveedorSucursalRef (
    idProveedorSucursal         NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    CodigoProveedor             INT NOT NULL,
    NumeroSucursal              INT NOT NULL,
    -- Campos esenciales para operaciones locales
    CodigoIpress                NVARCHAR(MAX) NULL,
    RegistroSeps                NVARCHAR(MAX) NULL,
    Descripcion                 NVARCHAR(MAX) NULL,
    direccion                   NVARCHAR(MAX) NULL,
    -- Metadatos de sincronización
    ultimaActualizacion         DATETIME NOT NULL DEFAULT GETDATE(),
    estadoSincronizacion        NVARCHAR(1) NOT NULL DEFAULT 'V',
    intentosSync                INT NOT NULL DEFAULT 0,
    errorSync                   NVARCHAR(500) NULL,
    -- Campos estándar de auditoría
    estRegistro                 NVARCHAR(MAX) NULL,
    codSistema                  NVARCHAR(MAX) NULL,
    compania                    NVARCHAR(MAX) NULL,
    codUsuarioCreadorSistema    NVARCHAR(MAX) NULL,
    fecCreacionSistema          DATETIME NULL,
    codUsuarioUpdateSistema     NVARCHAR(MAX) NULL,
    fecUpdateSistema            DATETIME NULL,
    codUsuarioCreador           NVARCHAR(MAX) NULL,
    fecCreacion                 DATETIME NULL,
    codUsuarioUpdate            NVARCHAR(MAX) NULL,
    fecUpdate                   DATETIME NULL,
    
    CONSTRAINT PK_Mae_ProveedorSucursalRef PRIMARY KEY (idProveedorSucursal)
);

-- =====================================================================
-- TABLAS CORE DEL NEGOCIO (Almacenadas localmente)
-- Esquema: contrato
-- =====================================================================

-- TABLA PRINCIPAL DE CONTRATOS
CREATE TABLE contrato.Contrato (
    contratoId                  NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    nroContrato                 INT NOT NULL,
    nroVersion                  INT NOT NULL,
    -- Referencia a proveedor (código, no FK)
    codProveedor                INT NOT NULL,
    IndicadorCoberturaCliente   NVARCHAR(1) NULL DEFAULT 'N',
    fechaInicioVigencia         DATE NULL,
    fechaFinVigencia            DATE NULL,
    descripcion                 NVARCHAR(500) NULL,
    observaciones               NVARCHAR(1000) NULL,
    -- Campos estándar de auditoría
    estRegistro                 NVARCHAR(MAX) NULL,
    codSistema                  NVARCHAR(MAX) NULL,
    compania                    NVARCHAR(MAX) NULL,
    codUsuarioCreadorSistema    NVARCHAR(MAX) NULL,
    fecCreacionSistema          DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdateSistema     NVARCHAR(MAX) NULL,
    fecUpdateSistema            DATETIME NULL,
    codUsuarioCreador           NVARCHAR(MAX) NULL,
    fecCreacion                 DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdate            NVARCHAR(MAX) NULL,
    fecUpdate                   DATETIME NULL,
    
    CONSTRAINT PK_Contrato PRIMARY KEY (contratoId)
);

-- TABLA DE VERSIONES DE CONTRATOS
CREATE TABLE contrato.ContratoVersion (
    contratoVersionId           NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    nroContrato                 INT NOT NULL,
    nroVersion                  INT NOT NULL,
    fechaInicioVigencia         DATE NOT NULL,
    fechaFinVigencia            DATE NOT NULL,
    descripcion                 NVARCHAR(500) NULL,
    observaciones               NVARCHAR(1000) NULL,
    -- Campos estándar de auditoría
    estRegistro                 NVARCHAR(MAX) NULL,
    codSistema                  NVARCHAR(MAX) NULL,
    compania                    NVARCHAR(MAX) NULL,
    codUsuarioCreadorSistema    NVARCHAR(MAX) NULL,
    fecCreacionSistema          DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdateSistema     NVARCHAR(MAX) NULL,
    fecUpdateSistema            DATETIME NULL,
    codUsuarioCreador           NVARCHAR(MAX) NULL,
    fecCreacion                 DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdate            NVARCHAR(MAX) NULL,
    fecUpdate                   DATETIME NULL,
    
    CONSTRAINT PK_ContratoVersion PRIMARY KEY (contratoVersionId)
);

-- TABLA DE ASOCIACIÓN SUCURSAL-CONTRATO-VERSION
CREATE TABLE contrato.SucursalContratoVersion (
    contratoVersionSucursalId   NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    nroContrato                 INT NOT NULL,
    nroversion                  INT NOT NULL,
    -- Referencias por código (no FK a microservicios)
    CodigoProveedor             INT NOT NULL,
    nroSucursalProveedor        INT NOT NULL,
    tipoContrato                INT NOT NULL,
    fechaInicioVigencia         DATE NOT NULL,
    fechaFinVigencia            DATE NOT NULL,
    PlazoCredito                INT NULL,
    registroSEPS                NVARCHAR(10) NULL,
    codigoMoneda                INT NULL,
    poblacionAsignada           INT NULL,
    valorCapita                 NUMERIC(10,2) NULL,
    -- Campos estándar de auditoría
    estRegistro                 NVARCHAR(MAX) NULL,
    codSistema                  NVARCHAR(MAX) NULL,
    compania                    NVARCHAR(MAX) NULL,
    codUsuarioCreadorSistema    NVARCHAR(MAX) NULL,
    fecCreacionSistema          DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdateSistema     NVARCHAR(MAX) NULL,
    fecUpdateSistema            DATETIME NULL,
    codUsuarioCreador           NVARCHAR(MAX) NULL,
    fecCreacion                 DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdate            NVARCHAR(MAX) NULL,
    fecUpdate                   DATETIME NULL,
    
    CONSTRAINT PK_SucursalContratoVersion PRIMARY KEY (contratoVersionSucursalId)
);

-- TABLA DE BENEFICIOS POR SUCURSAL-CONTRATO-VERSION
CREATE TABLE contrato.SucursalContratoVersionBeneficio (
    SucursalContratoVersionBeneficioId NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    nroContrato                 INT NOT NULL,
    nroVersion                  INT NOT NULL,
    CodigoProveedor             INT NOT NULL,
    nroSucursalProveedor        INT NOT NULL,
    -- Referencia a beneficio (código, no FK a microservicio)
    codigoBeneficio             NVARCHAR(MAX) NULL,
    costoFijoPaciente           NUMERIC(9,2) NULL,
    tipoPEAS                    NVARCHAR(1) NULL,
    numVersion                  INT NULL,
    fechaRegistroPEAS           DATE NULL,
    condicionesAdicionales      NVARCHAR(1000) NULL,
    -- Campos estándar de auditoría
    estRegistro                 NVARCHAR(MAX) NULL,
    codSistema                  NVARCHAR(MAX) NULL,
    compania                    NVARCHAR(MAX) NULL,
    codUsuarioCreadorSistema    NVARCHAR(MAX) NULL,
    fecCreacionSistema          DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdateSistema     NVARCHAR(MAX) NULL,
    fecUpdateSistema            DATETIME NULL,
    codUsuarioCreador           NVARCHAR(MAX) NULL,
    fecCreacion                 DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioUpdate            NVARCHAR(MAX) NULL,
    fecUpdate                   DATETIME NULL,
    
    CONSTRAINT PK_SucursalContratoVersionBeneficio PRIMARY KEY (SucursalContratoVersionBeneficioId)
);

-- =====================================================================
-- TABLA DE LOG DE SINCRONIZACIÓN CON MICROSERVICIOS
-- Esquema: auditoria
-- =====================================================================

CREATE TABLE auditoria.Log_SincronizacionMicroservicios (
    LogId                       NVARCHAR(26) NOT NULL, -- ULID desde pipeline
    TipoEntidad                 NVARCHAR(50) NOT NULL, -- PROVEEDOR, BENEFICIO, SUCURSAL
    CodigoEntidad               NVARCHAR(50) NOT NULL, -- Código de la entidad
    Microservicio               NVARCHAR(100) NOT NULL, -- consulta-proveedor, consulta-convenios
    Operacion                   NVARCHAR(20) NOT NULL, -- CONSULTA, CACHE, ERROR
    Estado                      NVARCHAR(20) NOT NULL, -- EXITOSO, ERROR, TIMEOUT
    TiempoRespuesta             INT NULL, -- Milisegundos
    MensajeError                NVARCHAR(1000) NULL,
    DatosRequest                NVARCHAR(MAX) NULL, -- JSON del request
    DatosResponse               NVARCHAR(MAX) NULL, -- JSON del response
    VersionAPI                  NVARCHAR(10) NULL,
    CorrelationId               NVARCHAR(50) NULL,
    codSistema                  NVARCHAR(MAX) NULL,
    compania                    NVARCHAR(MAX) NULL,
    fecCreacion                 DATETIME NOT NULL DEFAULT GETDATE(),
    codUsuarioCreador           NVARCHAR(15) NOT NULL DEFAULT 'SYSTEM',
    
    CONSTRAINT PK_Log_SincronizacionMicroservicios PRIMARY KEY (LogId),
    CONSTRAINT CK_Log_Sync_TipoEntidad CHECK (TipoEntidad IN ('PROVEEDOR', 'BENEFICIO', 'SUCURSAL')),
    CONSTRAINT CK_Log_Sync_Operacion CHECK (Operacion IN ('CONSULTA', 'CACHE', 'ERROR', 'TIMEOUT')),
    CONSTRAINT CK_Log_Sync_Estado CHECK (Estado IN ('EXITOSO', 'ERROR', 'TIMEOUT', 'PENDIENTE'))
);

-- =====================================================================
-- ÍNDICES OPTIMIZADOS
-- =====================================================================

-- Índices para Tip_TipoContrato
CREATE INDEX IX_Tip_TipoContrato_TipoContrato ON contrato.Tip_TipoContrato (tipoContrato);
CREATE INDEX IX_Tip_TipoContrato_Sistema_Compania ON contrato.Tip_TipoContrato (codSistema, codCompania);

-- Índices para referencias de beneficios
CREATE INDEX IX_Mae_BeneficioRef_CodBeneficio ON convenio.Mae_BeneficioRef (codBeneficio);
CREATE INDEX IX_Mae_BeneficioRef_Sistema_Compania ON convenio.Mae_BeneficioRef (codSistema, compania);
CREATE INDEX IX_Mae_BeneficioRef_EstadoSync ON convenio.Mae_BeneficioRef (estadoSincronizacion);

-- Índices para referencias de proveedores
CREATE INDEX IX_Mae_ProveedorRef_CodigoProveedor ON proveedor.Mae_ProveedorRef (CodigoProveedor);
CREATE INDEX IX_Mae_ProveedorRef_Sistema_Compania ON proveedor.Mae_ProveedorRef (codSistema, compania);
CREATE INDEX IX_Mae_ProveedorRef_EstadoSync ON proveedor.Mae_ProveedorRef (estadoSincronizacion);

-- Índices para sucursales
CREATE INDEX IX_Mae_ProveedorSucursalRef_CodigoProveedor ON proveedor.Mae_ProveedorSucursalRef (CodigoProveedor);
CREATE INDEX IX_Mae_ProveedorSucursalRef_NumeroSucursal ON proveedor.Mae_ProveedorSucursalRef (NumeroSucursal);

-- Índices para contratos
CREATE INDEX IX_Contrato_NroContrato ON contrato.Contrato (nroContrato);
CREATE INDEX IX_Contrato_CodProveedor ON contrato.Contrato (codProveedor);
CREATE INDEX IX_Contrato_Sistema_Compania ON contrato.Contrato (codSistema, compania);

-- Índices para versiones de contratos
CREATE INDEX IX_ContratoVersion_NroContrato ON contrato.ContratoVersion (nroContrato);
CREATE INDEX IX_ContratoVersion_Sistema_Compania ON contrato.ContratoVersion (codSistema, compania);

-- Índices para sucursal contrato version
CREATE INDEX IX_SucursalContratoVersion_NroContrato ON contrato.SucursalContratoVersion (nroContrato);
CREATE INDEX IX_SucursalContratoVersion_CodigoProveedor ON contrato.SucursalContratoVersion (CodigoProveedor);
CREATE INDEX IX_SucursalContratoVersion_TipoContrato ON contrato.SucursalContratoVersion (tipoContrato);

-- Índices para beneficios
CREATE INDEX IX_SucursalContratoVersionBeneficio_CodigoBeneficio ON contrato.SucursalContratoVersionBeneficio (codigoBeneficio);
CREATE INDEX IX_SucursalContratoVersionBeneficio_NroContrato ON contrato.SucursalContratoVersionBeneficio (nroContrato);

-- Índices para log de sincronización
CREATE INDEX IX_Log_Sync_TipoEntidad_Codigo ON auditoria.Log_SincronizacionMicroservicios (TipoEntidad, CodigoEntidad);
CREATE INDEX IX_Log_Sync_Microservicio ON auditoria.Log_SincronizacionMicroservicios (Microservicio);
CREATE INDEX IX_Log_Sync_FechaCreacion ON auditoria.Log_SincronizacionMicroservicios (fecCreacion);

-- =====================================================================
-- DATOS INICIALES PARA TIPO CONTRATO
-- =====================================================================

-- Nota: Los IDs deben ser generados desde el pipeline
-- Este es solo un ejemplo de la estructura de datos esperada

/*
INSERT INTO contrato.Tip_TipoContrato (
    tipoContratoId, tipoContrato, descripContrato, descripcionResumidaContrato, 
    codSistema, codCompania, codUsuarioCreador
) VALUES
-- Los valores de tipoContratoId deben venir del pipeline con ULID generado
*/

-- =====================================================================
-- PROCEDIMIENTOS PARA SINCRONIZACIÓN CON MICROSERVICIOS
-- =====================================================================

-- Procedimiento para registrar logs de sincronización
CREATE PROCEDURE auditoria.SP_RegistrarLogSincronizacion
    @LogId NVARCHAR(26),
    @TipoEntidad NVARCHAR(50),
    @CodigoEntidad NVARCHAR(50),
    @Microservicio NVARCHAR(100),
    @Operacion NVARCHAR(20),
    @Estado NVARCHAR(20),
    @TiempoRespuesta INT = NULL,
    @MensajeError NVARCHAR(1000) = NULL,
    @DatosRequest NVARCHAR(MAX) = NULL,
    @DatosResponse NVARCHAR(MAX) = NULL,
    @CorrelationId NVARCHAR(50) = NULL,
    @Sistema NVARCHAR(MAX) = 'ACSEL',
    @Compania NVARCHAR(MAX) = '20002'
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO auditoria.Log_SincronizacionMicroservicios (
        LogId, TipoEntidad, CodigoEntidad, Microservicio, Operacion, Estado,
        TiempoRespuesta, MensajeError, DatosRequest, DatosResponse,
        CorrelationId, codSistema, compania
    ) VALUES (
        @LogId, @TipoEntidad, @CodigoEntidad, @Microservicio, @Operacion, @Estado,
        @TiempoRespuesta, @MensajeError, @DatosRequest, @DatosResponse,
        @CorrelationId, @Sistema, @Compania
    );
END;

-- Procedimiento para obtener estadísticas de microservicios
CREATE PROCEDURE auditoria.SP_EstadisticasMicroservicios
    @FechaInicio DATE = NULL,
    @FechaFin DATE = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    IF @FechaInicio IS NULL SET @FechaInicio = DATEADD(DAY, -7, GETDATE());
    IF @FechaFin IS NULL SET @FechaFin = GETDATE();
    
    SELECT 
        Microservicio,
        TipoEntidad,
        COUNT(*) AS TotalLlamadas,
        COUNT(CASE WHEN Estado = 'EXITOSO' THEN 1 END) AS Exitosas,
        COUNT(CASE WHEN Estado = 'ERROR' THEN 1 END) AS Errores,
        COUNT(CASE WHEN Estado = 'TIMEOUT' THEN 1 END) AS Timeouts,
        AVG(TiempoRespuesta) AS TiempoPromedioMs,
        MIN(fecCreacion) AS PrimeraLlamada,
        MAX(fecCreacion) AS UltimaLlamada
    FROM auditoria.Log_SincronizacionMicroservicios
    WHERE fecCreacion BETWEEN @FechaInicio AND @FechaFin
    GROUP BY Microservicio, TipoEntidad
    ORDER BY Microservicio, TipoEntidad;
END;

PRINT '';
PRINT '======================================================================';
PRINT 'ESQUEMAS Y TABLAS CREADOS PARA ARQUITECTURA DE MICROSERVICIOS';
PRINT '======================================================================';
PRINT 'Esquemas creados: 4 (convenio, proveedor, contrato, auditoria)';
PRINT 'Tablas por esquema:';
PRINT '  - convenio: 1 (Mae_BeneficioRef)';
PRINT '  - proveedor: 2 (Mae_ProveedorRef, Mae_ProveedorSucursalRef)';
PRINT '  - contrato: 4 (Tip_TipoContrato, Contrato, ContratoVersion, SucursalContratoVersion*, SucursalContratoVersionBeneficio)';
PRINT '  - auditoria: 1 (Log_SincronizacionMicroservicios)';
PRINT 'Índices optimizados: 15+';
PRINT '';
PRINT 'CONFIGURACIÓN DE IDs:';
PRINT '  - Tipo: NVARCHAR(26) para ULID';
PRINT '  - Origen: Generados desde pipeline de datos';
PRINT '  - Compatibilidad: NVARCHAR(MAX) en campos estándar';
PRINT '';
PRINT 'MICROSERVICIOS INTEGRADOS:';
PRINT '  - consulta-convenios → esquema convenio';
PRINT '  - consulta-proveedor → esquema proveedor';
PRINT '  - contratos (local) → esquema contrato';
PRINT '  - logs y auditoría → esquema auditoria';
PRINT '======================================================================';

/*
ARQUITECTURA CON ESQUEMAS POR MICROSERVICIO:

1. ESQUEMA convenio:
   - Mae_BeneficioRef: Compatible con Mae_Beneficio existente
   - Campos NVARCHAR(MAX) para compatibilidad total
   - Metadatos de sincronización añadidos

2. ESQUEMA proveedor:
   - Mae_ProveedorRef: Cache de proveedores
   - Mae_ProveedorSucursalRef: Cache de sucursales
   - Estructura compatible con estándar organizacional

3. ESQUEMA contrato:
   - Tip_TipoContrato: Tipos de contrato (local)
   - Contrato: Tabla principal de contratos
   - ContratoVersion: Versiones de contratos
   - SucursalContratoVersion: Asociaciones sucursal-contrato
   - SucursalContratoVersionBeneficio: Beneficios por contrato

4. ESQUEMA auditoria:
   - Log_SincronizacionMicroservicios: Logs de integración
   - Procedimientos de auditoría y estadísticas

VENTAJAS:
✅ Separación clara por responsabilidades
✅ Compatible con estructura existente
✅ Escalable para nuevos microservicios
✅ IDs externos desde pipeline
✅ Logs completos de integración
*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Mae_CompaniaSeguro](
	[IdCompaniaSeguro] [uniqueidentifier] NOT NULL,
	[IdPersonaJuridica] [uniqueidentifier] NOT NULL,
	[CodigoIAFA] [varchar](5) NOT NULL,
	[DescripcionCompaniaSeguro] [varchar](40) NOT NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_CompaniaSeguro] ADD  CONSTRAINT [PK_Mae_CompaniaSeguro] PRIMARY KEY CLUSTERED 
(
	[IdCompaniaSeguro] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_CompaniaSeguro]  WITH CHECK ADD  CONSTRAINT [FK_Mae_CompaniaSeguro_Mae_PersonaJuridica] FOREIGN KEY([IdPersonaJuridica])
REFERENCES [persona].[Mae_PersonaJuridica] ([IdPersona])
GO
ALTER TABLE [persona].[Mae_CompaniaSeguro] CHECK CONSTRAINT [FK_Mae_CompaniaSeguro_Mae_PersonaJuridica]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Mae_Persona](
	[IdPersona] [uniqueidentifier] NOT NULL,
	[TipoPersona] [char](1) NOT NULL,
	[NombreCompletoPersona] [nvarchar](200) NOT NULL,
	[NombreAbreviadoPersona] [nvarchar](100) NOT NULL,
	[CodigoTipoDocumento] [varchar](20) NOT NULL,
	[NumeroDocumento] [varchar](20) NOT NULL,
	[DescripcionPaginaWeb] [nvarchar](100) NULL,
	[CodigoTipoTrabajador] [char](1) NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_Persona] ADD  CONSTRAINT [PK_Mae_Persona] PRIMARY KEY CLUSTERED 
(
	[IdPersona] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_Mae_Persona_01] ON [persona].[Mae_Persona]
(
	[NumeroDocumento] ASC,
	[CodigoTipoDocumento] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_Mae_Persona_02] ON [persona].[Mae_Persona]
(
	[NombreCompletoPersona] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Mae_PersonaJuridica](
	[IdPersona] [uniqueidentifier] NOT NULL,
	[FechaAniversario] [date] NULL,
	[NombreRazonSocial] [varchar](70) NOT NULL,
	[NombreRazonSocialAbreviada] [varchar](50) NULL,
	[CodigoGrupoEconomico] [varchar](6) NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_PersonaJuridica] ADD  CONSTRAINT [PK_Mae_PersonaJuridica] PRIMARY KEY CLUSTERED 
(
	[IdPersona] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_Mae_PersonaJuridica_01] ON [persona].[Mae_PersonaJuridica]
(
	[NombreRazonSocial] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_PersonaJuridica]  WITH CHECK ADD  CONSTRAINT [FK_Mae_PersonaJuridica_Mae_Persona] FOREIGN KEY([IdPersona])
REFERENCES [persona].[Mae_Persona] ([IdPersona])
GO
ALTER TABLE [persona].[Mae_PersonaJuridica] CHECK CONSTRAINT [FK_Mae_PersonaJuridica_Mae_Persona]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Mae_Proveedor](
	[IdProveedor] [uniqueidentifier] NOT NULL,
	[IdPersona] [uniqueidentifier] NOT NULL,
	[IdTipoProveedor] [uniqueidentifier] NOT NULL,
	[CodigoProveedor] [varchar](10) NOT NULL,
	[TipoProveedor] [numeric](2, 0) NOT NULL,
	[IndicadorCertificacion] [varchar](1) NULL,
	[IndicadorRedSelecta] [varchar](1) NOT NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_Proveedor] ADD  CONSTRAINT [PK_Mae_Proveedor] PRIMARY KEY CLUSTERED 
(
	[IdProveedor] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_Mae_Proveedor_01] ON [persona].[Mae_Proveedor]
(
	[CodigoProveedor] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_Mae_Proveedor_02] ON [persona].[Mae_Proveedor]
(
	[IdPersona] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_Proveedor]  WITH CHECK ADD  CONSTRAINT [FK_Mae_Proveedor_Mae_Persona] FOREIGN KEY([IdPersona])
REFERENCES [persona].[Mae_Persona] ([IdPersona])
GO
ALTER TABLE [persona].[Mae_Proveedor] CHECK CONSTRAINT [FK_Mae_Proveedor_Mae_Persona]
GO
ALTER TABLE [persona].[Mae_Proveedor]  WITH CHECK ADD  CONSTRAINT [FK_Mae_Proveedor_Tip_TipoProveedor] FOREIGN KEY([IdTipoProveedor])
REFERENCES [persona].[Tip_TipoProveedor] ([IdTipoProveedor])
GO
ALTER TABLE [persona].[Mae_Proveedor] CHECK CONSTRAINT [FK_Mae_Proveedor_Tip_TipoProveedor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Mae_Sucursal](
	[IdSucursal] [uniqueidentifier] NOT NULL,
	[IdProveedor] [uniqueidentifier] NOT NULL,
	[CodigoProveedor] [varchar](10) NOT NULL,
	[NumeroSucursalProveedor] [varchar](4) NOT NULL,
	[DescripcionSucursal] [varchar](150) NOT NULL,
	[IndicadorPrincipalSucursal] [varchar](1) NOT NULL,
	[CategoriaSucursal] [char](1) NULL,
	[CodigoSucursalSeps] [varchar](10) NULL,
	[RegistroSeps] [varchar](10) NULL,
	[IndicadorEPS] [varchar](1) NULL,
	[CodigoSeps] [varchar](20) NULL,
	[CodigoClinicaEps] [varchar](20) NULL,
	[IndicadorRedSelecta] [char](1) NULL,
	[IndicadorExoneracionIgv] [varchar](1) NULL,
	[IndicadorDetraccion] [varchar](1) NULL,
	[TipoInstitucion] [varchar](20) NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_Sucursal] ADD  CONSTRAINT [PK_Mae_Sucursal] PRIMARY KEY CLUSTERED 
(
	[IdSucursal] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_Mae_Sucursal_01] ON [persona].[Mae_Sucursal]
(
	[CodigoProveedor] ASC,
	[NumeroSucursalProveedor] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_Mae_Sucursal_02] ON [persona].[Mae_Sucursal]
(
	[IdProveedor] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_Sucursal]  WITH CHECK ADD  CONSTRAINT [FK_Mae_Sucursal_Mae_Proveedor] FOREIGN KEY([IdProveedor])
REFERENCES [persona].[Mae_Proveedor] ([IdProveedor])
GO
ALTER TABLE [persona].[Mae_Sucursal] CHECK CONSTRAINT [FK_Mae_Sucursal_Mae_Proveedor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Mae_SucursalCompaniaSeguro](
	[IdSucursalCompaniaSeguro] [uniqueidentifier] NOT NULL,
	[IdSucursal] [uniqueidentifier] NOT NULL,
	[IdCompaniaSeguro] [uniqueidentifier] NOT NULL,
	[CodigoProveedor] [varchar](10) NOT NULL,
	[NumeroSucursalProveedor] [varchar](10) NOT NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_SucursalCompaniaSeguro] ADD  CONSTRAINT [PK_Mae_SucursalCompaniaSeguro] PRIMARY KEY CLUSTERED 
(
	[IdSucursalCompaniaSeguro] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_Mae_SucursalCompaniaSeguro_01] ON [persona].[Mae_SucursalCompaniaSeguro]
(
	[IdSucursal] ASC,
	[IdCompaniaSeguro] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [persona].[Mae_SucursalCompaniaSeguro]  WITH CHECK ADD  CONSTRAINT [FK_Mae_SucursalCompaniaSeguro_Mae_CompaniaSeguro] FOREIGN KEY([IdCompaniaSeguro])
REFERENCES [persona].[Mae_CompaniaSeguro] ([IdCompaniaSeguro])
GO
ALTER TABLE [persona].[Mae_SucursalCompaniaSeguro] CHECK CONSTRAINT [FK_Mae_SucursalCompaniaSeguro_Mae_CompaniaSeguro]
GO
ALTER TABLE [persona].[Mae_SucursalCompaniaSeguro]  WITH CHECK ADD  CONSTRAINT [FK_Mae_SucursalCompaniaSeguro_Mae_Sucursal] FOREIGN KEY([IdSucursal])
REFERENCES [persona].[Mae_Sucursal] ([IdSucursal])
GO
ALTER TABLE [persona].[Mae_SucursalCompaniaSeguro] CHECK CONSTRAINT [FK_Mae_SucursalCompaniaSeguro_Mae_Sucursal]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Tbt_PersonaCompaniaSeguro](
	[IdPersonaCompaniaSeguro] [uniqueidentifier] NOT NULL,
	[IdPersona] [uniqueidentifier] NOT NULL,
	[IdCompaniaSeguro] [uniqueidentifier] NOT NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Tbt_PersonaCompaniaSeguro] ADD  CONSTRAINT [PK_Tbt_PersonaCompaniaSeguro] PRIMARY KEY CLUSTERED 
(
	[IdPersonaCompaniaSeguro] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_Tbt_PersonaCompaniaSeguro_01] ON [persona].[Tbt_PersonaCompaniaSeguro]
(
	[IdPersona] ASC,
	[IdCompaniaSeguro] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [persona].[Tbt_PersonaCompaniaSeguro]  WITH CHECK ADD  CONSTRAINT [FK_Tbt_PersonaCompaniaSeguro_Mae_CompaniaSeguro] FOREIGN KEY([IdCompaniaSeguro])
REFERENCES [persona].[Mae_CompaniaSeguro] ([IdCompaniaSeguro])
GO
ALTER TABLE [persona].[Tbt_PersonaCompaniaSeguro] CHECK CONSTRAINT [FK_Tbt_PersonaCompaniaSeguro_Mae_CompaniaSeguro]
GO
ALTER TABLE [persona].[Tbt_PersonaCompaniaSeguro]  WITH CHECK ADD  CONSTRAINT [FK_Tbt_PersonaCompaniaSeguro_Mae_Persona] FOREIGN KEY([IdPersona])
REFERENCES [persona].[Mae_Persona] ([IdPersona])
GO
ALTER TABLE [persona].[Tbt_PersonaCompaniaSeguro] CHECK CONSTRAINT [FK_Tbt_PersonaCompaniaSeguro_Mae_Persona]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Tbt_PersonaRol](
	[IdPersonaRol] [uniqueidentifier] NOT NULL,
	[IdPersona] [uniqueidentifier] NOT NULL,
	[IdTipoRol] [varchar](8) NOT NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [persona].[Tbt_PersonaRol] ADD  CONSTRAINT [PK_Tbt_PersonaRol] PRIMARY KEY CLUSTERED 
(
	[IdPersonaRol] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_Tbt_PersonaRol_01] ON [persona].[Tbt_PersonaRol]
(
	[IdPersona] ASC,
	[IdTipoRol] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [persona].[Tbt_PersonaRol]  WITH CHECK ADD  CONSTRAINT [FK_Tbt_PersonaRol_Mae_Persona] FOREIGN KEY([IdPersona])
REFERENCES [persona].[Mae_Persona] ([IdPersona])
GO
ALTER TABLE [persona].[Tbt_PersonaRol] CHECK CONSTRAINT [FK_Tbt_PersonaRol_Mae_Persona]
GO
ALTER TABLE [persona].[Tbt_PersonaRol]  WITH CHECK ADD  CONSTRAINT [FK_Tbt_PersonaRol_Tip_Rol] FOREIGN KEY([IdTipoRol])
REFERENCES [persona].[Tip_Rol] ([IdTipoRol])
GO
ALTER TABLE [persona].[Tbt_PersonaRol] CHECK CONSTRAINT [FK_Tbt_PersonaRol_Tip_Rol]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [persona].[Tip_Rol](
	[IdTipoRol] [varchar](8) NOT NULL,
	[CodigoLval] [varchar](15) NULL,
	[DescripcionRol] [varchar](50) NOT NULL,
	[EstadoRegistro] [char](1) NOT NULL,
	[CodigoUsuarioCreador] [varchar](15) NOT NULL,
	[FechaCreacion] [datetime] NOT NULL,
	[CodigoUsuarioModificador] [varchar](15) NULL,
	[FechaModificacion] [datetime] NULL,
	[CodigoUsuarioCreadorSistema] [varchar](15) NOT NULL,
	[FechaCreacionSistema] [datetime] NOT NULL,
	[CodigoUsuarioUpdateSistema] [varchar](15) NULL,
	[FechaUpdateSistema] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
ALTER TABLE [persona].[Tip_Rol] ADD  CONSTRAINT [PK_Tip_Rol] PRIMARY KEY CLUSTERED 
(
	[IdTipoRol] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO



-- Paso 1: Eliminar la Foreign Key en Tbt_PersonaRol
ALTER TABLE Tbt_PersonaRol
DROP CONSTRAINT FK_Tbt_PersonaRol_Tip_Rol;
GO

-- Paso 2: Eliminar la Primary Key en Tip_Rol
ALTER TABLE Tip_Rol
DROP CONSTRAINT PK_Tip_Rol;
GO

-- Paso 3: Cambiar el tipo de dato en la tabla principal Tip_Rol
ALTER TABLE Tip_Rol
ALTER COLUMN IdTipoRol VARCHAR(30) NOT NULL;
GO

-- Paso 4: Recrear la Primary Key en Tip_Rol
ALTER TABLE Tip_Rol
ADD CONSTRAINT PK_Tip_Rol PRIMARY KEY (IdTipoRol);
GO

-- Paso 5: Cambiar el tipo de dato en la tabla relacionada Tbt_PersonaRol
ALTER TABLE Tbt_PersonaRol
ALTER COLUMN IdTipoRol VARCHAR(30) NOT NULL;
GO

-- Paso 6: Recrear la Foreign Key en Tbt_PersonaRol
ALTER TABLE Tbt_PersonaRol
ADD CONSTRAINT FK_Tbt_PersonaRol_Tip_Rol 
FOREIGN KEY (IdTipoRol) REFERENCES Tip_Rol(IdTipoRol);
GO

-- Verificar los cambios
-- Puedes ejecutar estos comandos para confirmar que los cambios se aplicaron correctamente:
/*
SELECT 
    c.name AS ColumnName,
    t.name AS DataType,
    c.max_length,
    c.is_nullable
FROM sys.columns c
INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
WHERE c.object_id = OBJECT_ID('Tip_Rol') 
    AND c.name = 'IdTipoRol';

SELECT 
    c.name AS ColumnName,
    t.name AS DataType,
    c.max_length,
    c.is_nullable
FROM sys.columns c
INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
WHERE c.object_id = OBJECT_ID('Tbt_PersonaRol') 
    AND c.name = 'IdTipoRol';
*/

-- Eliminar las tablas existentes en el esquema personas
DROP TABLE IF EXISTS personas.Tbt_PersonaRol;
GO
DROP TABLE IF EXISTS personas.Tip_Rol;
GO

-- Recrear la tabla Tip_Rol en el esquema personas con IdTipoRol VARCHAR(30)
CREATE TABLE personas.Tip_Rol (
    IdTipoRol                      VARCHAR(30)         NOT NULL    CONSTRAINT PK_Tip_Rol PRIMARY KEY,
    CodigoLval                     VARCHAR(15)         NULL,
    DescripcionRol                 VARCHAR(50)         NOT NULL,
    EstadoRegistro                 CHAR(1)             NOT NULL,   -- V: Vigente, A: Anulado
    CodigoUsuarioCreador           VARCHAR(15)         NOT NULL,
    FechaCreacion                  DATETIME            NOT NULL,
    CodigoUsuarioModificador       VARCHAR(15)         NULL,
    FechaModificacion              DATETIME            NULL,
    -- Campos de auditoría adicionales
    CodigoUsuarioCreadorSistema    VARCHAR(15)         NOT NULL,
    FechaCreacionSistema           DATETIME            NOT NULL,
    CodigoUsuarioUpdateSistema     VARCHAR(15)         NULL,
    FechaUpdateSistema             DATETIME            NULL
);
GO

-- Recrear la tabla Tbt_PersonaRol en el esquema personas con IdTipoRol VARCHAR(30)
CREATE TABLE personas.Tbt_PersonaRol (
    IdPersonaRol                   UNIQUEIDENTIFIER    NOT NULL    CONSTRAINT PK_Tbt_PersonaRol PRIMARY KEY,
    IdPersona                      UNIQUEIDENTIFIER    NOT NULL    
        CONSTRAINT FK_Tbt_PersonaRol_Mae_Persona REFERENCES personas.Mae_Persona,
    IdTipoRol                      VARCHAR(30)         NOT NULL    
        CONSTRAINT FK_Tbt_PersonaRol_Tip_Rol REFERENCES personas.Tip_Rol,
    EstadoRegistro                 CHAR(1)             NOT NULL,   -- V: Vigente, A: Anulado
    CodigoUsuarioCreador           VARCHAR(15)         NOT NULL,
    FechaCreacion                  DATETIME            NOT NULL,
    CodigoUsuarioModificador       VARCHAR(15)         NULL,
    FechaModificacion              DATETIME            NULL,
    -- Campos de auditoría adicionales
    CodigoUsuarioCreadorSistema    VARCHAR(15)         NOT NULL,
    FechaCreacionSistema           DATETIME            NOT NULL,
    CodigoUsuarioUpdateSistema     VARCHAR(15)         NULL,
    FechaUpdateSistema             DATETIME            NULL
);
GO
