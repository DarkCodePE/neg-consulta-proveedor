{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2023",
    "sourceMap": true,FYAfQmXfS9DHnSEBx18GhVqUQLO2Zt3JJr1v
    "outDir": "./dist",
    "baseUrl": "./",
    "paths": {
      "@/*": ["src/*"]
    },
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "forceConsistentCasingInFileNames": true,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "noFallthroughCasesInSwitch": false
  }
}
SELECT
name AS database_name,
is_read_committed_snapshot_on
FROM sys.databases
WHERE name = DB_NAME();


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [convenio].[Mae_Beneficio](
	[idBeneficio] [nvarchar](max) NULL,
	[idGrupoBeneficio] [nvarchar](max) NULL,
	[idTipoCobertura] [nvarchar](max) NULL,
	[idSubtipoCobertura] [nvarchar](max) NULL,
	[codBeneficio] [nvarchar](max) NULL,
	[descripcion] [nvarchar](max) NULL,
	[desResumida] [nvarchar](max) NULL,
	[codGrupoBeneficio] [nvarchar](max) NULL,
	[codCobertura] [nvarchar](max) NULL,
	[subtipoCobert] [nvarchar](max) NULL,
	[estRegistro] [nvarchar](max) NULL,
	[codSistema] [nvarchar](max) NULL,
	[compania] [nvarchar](max) NULL,
	[codUsuarioCreadorSistema] [nvarchar](max) NULL,
	[fecCreacionSistema] [datetime] NULL,
	[codUsuarioUpdateSistema] [nvarchar](max) NULL,
	[fecUpdateSistema] [datetime] NULL,
	[codUsuarioCreador] [nvarchar](max) NULL,
	[fecCreacion] [datetime] NULL,
	[codUsuarioUpdate] [nvarchar](max) NULL,
	[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [convenio].[Mae_Log_Error_Merge]RIMARY KEY,
[FechaError] DATETIME2 NOT NULL DEFAULT SYSDATETIME(),
[Procedimiento] NVARCHAR(100) NULL,
[TablaDestino] NVARCHAR(100) NULL,
[MensajeError] NVARCHAR(4000) NULL,
[LineaError] INT NULL,
[RegistrosProcesados] INT NULL,
[RegistrosTotales] INT NULL,
[Estado] NVARCHAR(20) NULL
) ON [PRIMARY]
G


CREATE TABLE [convenio].[Mae_Log_Error_Merge] (
[IdLog] INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
[FechaError] DATETIME2 NOT NULL DEFAULT SYSDATETIME(),
[Procedimiento] NVARCHAR(100) NULL,
[TablaDestino] NVARCHAR(100) NULL,
[MensajeError] NVARCHAR(4000) NULL,
[LineaError] INT NULL,
[RegistrosProcesados] INT NULL,
[RegistrosTotales] INT NULL,
[Estado] NVARCHAR(20) NULL
) ON [PRIMARY];


_____
CREATE TABLE [convenio].[Mae_Beneficio_Temp](
[idBeneficio] [nvarchar](max) NULL,
[idGrupoBeneficio] [nvarchar](max) NULL,
[idTipoCobertura] [nvarchar](max) NULL,
[idSubtipoCobertura] [nvarchar](max) NULL,
[codBeneficio] [nvarchar](max) NULL,
[descripcion] [nvarchar](max) NULL,
[desResumida] [nvarchar](max) NULL,
[codGrupoBeneficio] [nvarchar](max) NULL,
[codCobertura] [nvarchar](max) NULL,
[subtipoCobert] [nvarchar](max) NULL,
[estRegistro] [nvarchar](max) NULL,
[codSistema] [nvarchar](max) NULL,
[compania] [nvarchar](max) NULL,
[codUsuarioCreadorSistema] [nvarchar](max) NULL,
[fecCreacionSistema] [datetime] NULL,
[codUsuarioUpdateSistema] [nvarchar](max) NULL,
[fecUpdateSistema] [datetime] NULL,
[codUsuarioCreador] [nvarchar](max) NULL,
[fecCreacion] [datetime] NULL,
[codUsuarioUpdate] [nvarchar](max) NULL,
[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

CREATE OR ALTER PROCEDURE [convenio].[USP_PRO_DeltaBeneficio]
@BatchSize INT = 500,
@EnableLogging BIT = 0
AS
BEGIN
SET NOCOUNT ON;
SET XACT_ABORT ON;

DECLARE @TotalRecords INT;
DECLARE @ProcessedRecords INT = 0;
DECLARE @BatchNumber INT = 1;
DECLARE @StartTime DATETIME2 = SYSDATETIME();
DECLARE @ErrorMessage NVARCHAR(4000);
DECLARE @TablaDestino NVARCHAR(100) = 'Mae_Beneficio';

-- Contar registros en staging
SELECT @TotalRecords = COUNT(*) FROM [convenio].[Mae_Beneficio_Temp];

-- Log inicial
IF @EnableLogging = 1
PRINT CONCAT('üîÑ Iniciando MERGE de ', @TotalRecords, ' registros...');

-- Validaci√≥n de duplicados
IF EXISTS (
SELECT [idBeneficio] FROM [convenio].[Mae_Beneficio_Temp] GROUP BY [idBeneficio] HAVING COUNT(*) > 1
)
BEGIN
RAISERROR('Error: Registros duplicados detectados en Mae_Beneficio_Temp.', 16, 1);
RETURN;
END;

BEGIN TRY
-- Crear tabla temporal para controlar los sub-lotes
CREATE TABLE #Batch (
[idBeneficio] NVARCHAR(MAX) NULL,
[idGrupoBeneficio] NVARCHAR(MAX) NULL,
[idTipoCobertura] NVARCHAR(MAX) NULL,
[idSubtipoCobertura] NVARCHAR(MAX) NULL,
[codBeneficio] NVARCHAR(MAX) NULL,
[descripcion] NVARCHAR(MAX) NULL,
[desResumida] NVARCHAR(MAX) NULL,
[codGrupoBeneficio] NVARCHAR(MAX) NULL,
[codCobertura] NVARCHAR(MAX) NULL,
[subtipoCobert] NVARCHAR(MAX) NULL,
[estRegistro] NVARCHAR(MAX) NULL,
[codSistema] NVARCHAR(MAX) NULL,
[compania] NVARCHAR(MAX) NULL,
[codUsuarioCreadorSistema] NVARCHAR(MAX) NULL,
[fecCreacionSistema] DATETIME NULL,
[codUsuarioUpdateSistema] NVARCHAR(MAX) NULL,
[fecUpdateSistema] DATETIME NULL,
[codUsuarioCreador] NVARCHAR(MAX) NULL,
[fecCreacion] DATETIME NULL,
[codUsuarioUpdate] NVARCHAR(MAX) NULL,
[fecUpdate] DATETIME NULL,
BatchGroup INT NOT NULL,
PRIMARY KEY CLUSTERED (BatchGroup, [idBeneficio])
);

-- Insertar los datos de staging dividi√©ndolos en grupos
INSERT INTO #Batch (
[idBeneficio], [idGrupoBeneficio], [idTipoCobertura], [idSubtipoCobertura], [codBeneficio], [descripcion], [desResumida],
[codGrupoBeneficio], [codCobertura], [subtipoCobert], [estRegistro], [codSistema], [compania], [codUsuarioCreadorSistema],
[fecCreacionSistema], [codUsuarioUpdateSistema], [fecUpdateSistema], [codUsuarioCreador], [fecCreacion], [codUsuarioUpdate],
[fecUpdate], BatchGroup
)
SELECT
[idBeneficio], [idGrupoBeneficio], [idTipoCobertura], [idSubtipoCobertura], [codBeneficio], [descripcion], [desResumida],
[codGrupoBeneficio], [codCobertura], [subtipoCobert], [estRegistro], [codSistema], [compania], [codUsuarioCreadorSistema],
[fecCreacionSistema], [codUsuarioUpdateSistema], [fecUpdateSistema], [codUsuarioCreador], [fecCreacion], [codUsuarioUpdate],
[fecUpdate],
((ROW_NUMBER() OVER (ORDER BY [idBeneficio]) - 1) / @BatchSize) + 1 AS BatchGroup
FROM [convenio].[Mae_Beneficio_Temp];

DECLARE @MaxBatchGroup INT;
SELECT @MaxBatchGroup = MAX(BatchGroup) FROM #Batch;

-- Procesar sub-lotes uno a uno
WHILE @BatchNumber <= @MaxBatchGroup
BEGIN
BEGIN TRANSACTION;

-- MERGE para cada sub-lote
MERGE [convenio].[Mae_Beneficio] AS TARGET
USING (
SELECT
[idBeneficio], [idGrupoBeneficio], [idTipoCobertura], [idSubtipoCobertura], [codBeneficio], [descripcion], [desResumida],
[codGrupoBeneficio], [codCobertura], [subtipoCobert], [estRegistro], [codSistema], [compania], [codUsuarioCreadorSistema],
[fecCreacionSistema], [codUsuarioUpdateSistema], [fecUpdateSistema], [codUsuarioCreador], [fecCreacion], [codUsuarioUpdate],
[fecUpdate]
FROM #Batch
WHERE BatchGroup = @BatchNumber
) AS SOURCE
ON TARGET.[idBeneficio] = SOURCE.[idBeneficio]

WHEN MATCHED AND (
TARGET.[idGrupoBeneficio] != SOURCE.[idGrupoBeneficio] OR
TARGET.[idTipoCobertura] != SOURCE.[idTipoCobertura] OR
TARGET.[idSubtipoCobertura] != SOURCE.[idSubtipoCobertura] OR
TARGET.[codBeneficio] != SOURCE.[codBeneficio] OR
TARGET.[descripcion] != SOURCE.[descripcion] OR
TARGET.[desResumida] != SOURCE.[desResumida] OR
TARGET.[codGrupoBeneficio] != SOURCE.[codGrupoBeneficio] OR
TARGET.[codCobertura] != SOURCE.[codCobertura] OR
TARGET.[subtipoCobert] != SOURCE.[subtipoCobert] OR
TARGET.[estRegistro] != SOURCE.[estRegistro] OR
TARGET.[codSistema] != SOURCE.[codSistema] OR
TARGET.[compania] != SOURCE.[compania] OR
TARGET.[codUsuarioCreadorSistema] != SOURCE.[codUsuarioCreadorSistema] OR
TARGET.[fecCreacionSistema] != SOURCE.[fecCreacionSistema] OR
TARGET.[codUsuarioUpdateSistema] != SOURCE.[codUsuarioUpdateSistema] OR
TARGET.[fecUpdateSistema] != SOURCE.[fecUpdateSistema] OR
TARGET.[codUsuarioCreador] != SOURCE.[codUsuarioCreador] OR
TARGET.[fecCreacion] != SOURCE.[fecCreacion] OR
TARGET.[codUsuarioUpdate] != SOURCE.[codUsuarioUpdate] OR
TARGET.[fecUpdate] != SOURCE.[fecUpdate]
) THEN
UPDATE SET
[idGrupoBeneficio] = SOURCE.[idGrupoBeneficio],
[idTipoCobertura] = SOURCE.[idTipoCobertura],
[idSubtipoCobertura] = SOURCE.[idSubtipoCobertura],
[codBeneficio] = SOURCE.[codBeneficio],
[descripcion] = SOURCE.[descripcion],
[desResumida] = SOURCE.[desResumida],
[codGrupoBeneficio] = SOURCE.[codGrupoBeneficio],
[codCobertura] = SOURCE.[codCobertura],
[subtipoCobert] = SOURCE.[subtipoCobert],
[estRegistro] = SOURCE.[estRegistro],
[codSistema] = SOURCE.[codSistema],
[compania] = SOURCE.[compania],
[codUsuarioCreadorSistema] = SOURCE.[codUsuarioCreadorSistema],
[fecCreacionSistema] = SOURCE.[fecCreacionSistema],
[codUsuarioUpdateSistema] = SOURCE.[codUsuarioUpdateSistema],
[fecUpdateSistema] = SOURCE.[fecUpdateSistema],
[codUsuarioCreador] = SOURCE.[codUsuarioCreador],
[fecCreacion] = SOURCE.[fecCreacion],
[codUsuarioUpdate] = SOURCE.[codUsuarioUpdate],
[fecUpdate] = SOURCE.[fecUpdate]

WHEN NOT MATCHED BY TARGET THEN
INSERT (
[idBeneficio], [idGrupoBeneficio], [idTipoCobertura], [idSubtipoCobertura], [codBeneficio], [descripcion], [desResumida],
[codGrupoBeneficio], [codCobertura], [subtipoCobert], [estRegistro], [codSistema], [compania], [codUsuarioCreadorSistema],
[fecCreacionSistema], [codUsuarioUpdateSistema], [fecUpdateSistema], [codUsuarioCreador], [fecCreacion], [codUsuarioUpdate],
[fecUpdate]
)
VALUES (
SOURCE.[idBeneficio], SOURCE.[idGrupoBeneficio], SOURCE.[idTipoCobertura], SOURCE.[idSubtipoCobertura], SOURCE.[codBeneficio],
SOURCE.[descripcion], SOURCE.[desResumida], SOURCE.[codGrupoBeneficio], SOURCE.[codCobertura], SOURCE.[subtipoCobert],
SOURCE.[estRegistro], SOURCE.[codSistema], SOURCE.[compania], SOURCE.[codUsuarioCreadorSistema], SOURCE.[fecCreacionSistema],
SOURCE.[codUsuarioUpdateSistema], SOURCE.[fecUpdateSistema], SOURCE.[codUsuarioCreador], SOURCE.[fecCreacion], SOURCE.[codUsuarioUpdate],
SOURCE.[fecUpdate]
);

COMMIT TRANSACTION;

-- Actualizar progreso
SELECT @ProcessedRecords = @ProcessedRecords + COUNT(*)
FROM #Batch WHERE BatchGroup = @BatchNumber;

IF @EnableLogging = 1
PRINT CONCAT('‚úÖ Sub-lote ', @BatchNumber, '/', @MaxBatchGroup, ' completado. Procesados: ', @ProcessedRecords);

SET @BatchNumber += 1;

-- Micro-pausa opcional
IF @BatchNumber <= @MaxBatchGroup
WAITFOR DELAY '00:00:00.010';
END;

-- Limpieza final
DROP TABLE #Batch;
TRUNCATE TABLE [convenio].[Mae_Beneficio_Temp];
IF @EnableLogging = 1
PRINT 'üßπ Tabla Mae_Beneficio_Temp limpiada con TRUNCATE.';

-- Log final
DECLARE @Duration INT = DATEDIFF(MILLISECOND, @StartTime, SYSDATETIME());
DECLARE @ResultMessage NVARCHAR(500) = CONCAT(
'‚úÖ MERGE completado. Total: ', @TotalRecords,
', Tiempo: ', @Duration, ' ms',
', Promedio: ', CASE WHEN @TotalRecords > 0 THEN @Duration/@TotalRecords ELSE 0 END, ' ms/reg'
);
PRINT @ResultMessage;

SELECT
@TotalRecords AS TotalRecords,
@ProcessedRecords AS ProcessedRecords,
@Duration AS DurationMs,
CASE WHEN @TotalRecords > 0 THEN @Duration/@TotalRecords ELSE 0 END AS AvgMsPerRecord,
'SUCCESS' AS Status;

END TRY
BEGIN CATCH
-- Manejo de errores
IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
IF OBJECT_ID('tempdb..#Batch') IS NOT NULL DROP TABLE #Batch;

SET @ErrorMessage = CONCAT('‚ùå Error en sub-lote ', @BatchNumber, ': ', ERROR_MESSAGE(), ' (L√≠nea: ', ERROR_LINE(), ')');
PRINT @ErrorMessage;

-- Registro de error (si existe tabla de log)
IF OBJECT_ID('convenio.Mae_Log_Error_Merge') IS NOT NULL
BEGIN
INSERT INTO [convenio].[Mae_Log_Error_Merge] (
[Procedimiento], [TablaDestino], [MensajeError], [LineaError],
[RegistrosProcesados], [RegistrosTotales], [Estado]
)
VALUES (
'sp_MergeProductosDatabricks', @TablaDestino, ERROR_MESSAGE(),
ERROR_LINE(), @ProcessedRecords, @TotalRecords, 'ERROR'
);
END

-- Retorno en caso de error
SELECT
@ProcessedRecords AS ProcessedRecords,
@TotalRecords AS TotalRecords,
@ErrorMessage AS ErrorMessage,
'ERROR' AS Status;

THROW;
END CATCH;
END;


*****

CREATE OR ALTER PROCEDURE [convenio].[USP_PRO_DeltaBeneficio]
@BatchSize INT = 500,
@EnableLogging BIT = 0
AS
BEGIN
SET NOCOUNT ON;
SET XACT_ABORT ON;

DECLARE @TotalRecords INT;
DECLARE @ProcessedRecords INT = 0;
DECLARE @BatchNumber INT = 1;
DECLARE @StartTime DATETIME2 = SYSDATETIME();
DECLARE @ErrorMessage NVARCHAR(4000);
DECLARE @TablaDestino NVARCHAR(100) = 'Mae_Beneficio';

-- Contar registros v√°lidos
SELECT @TotalRecords = COUNT(*) FROM [convenio].[Mae_Beneficio_Temp] WHERE idBeneficio IS NOT NULL;

IF @EnableLogging = 1
PRINT CONCAT(' Iniciando MERGE de ', @TotalRecords, ' registros v√°lidos...');

-- Validaci√≥n de duplicados
IF EXISTS (
SELECT idBeneficio
FROM [convenio].[Mae_Beneficio_Temp]
WHERE idBeneficio IS NOT NULL
GROUP BY idBeneficio
HAVING COUNT(*) > 1
)
BEGIN
RAISERROR('Error: Registros duplicados detectados en Mae_Beneficio_Temp.', 16, 1);
RETURN;
END;

BEGIN TRY
CREATE TABLE #Batch (
idBeneficio NVARCHAR(100) NOT NULL,
idGrupoBeneficio NVARCHAR(MAX) NULL,
idTipoCobertura NVARCHAR(MAX) NULL,
idSubtipoCobertura NVARCHAR(MAX) NULL,
codBeneficio NVARCHAR(MAX) NULL,
descripcion NVARCHAR(MAX) NULL,
desResumida NVARCHAR(MAX) NULL,
codGrupoBeneficio NVARCHAR(MAX) NULL,
codCobertura NVARCHAR(MAX) NULL,
subtipoCobert NVARCHAR(MAX) NULL,
estRegistro NVARCHAR(MAX) NULL,
codSistema NVARCHAR(MAX) NULL,
compania NVARCHAR(MAX) NULL,
codUsuarioCreadorSistema NVARCHAR(MAX) NULL,
fecCreacionSistema DATETIME NULL,
codUsuarioUpdateSistema NVARCHAR(MAX) NULL,
fecUpdateSistema DATETIME NULL,
codUsuarioCreador NVARCHAR(MAX) NULL,
fecCreacion DATETIME NULL,
codUsuarioUpdate NVARCHAR(MAX) NULL,
fecUpdate DATETIME NULL,
BatchGroup INT NOT NULL,
PRIMARY KEY CLUSTERED (BatchGroup, idBeneficio)
);

INSERT INTO #Batch (
idBeneficio, idGrupoBeneficio, idTipoCobertura, idSubtipoCobertura,
codBeneficio, descripcion, desResumida, codGrupoBeneficio,
codCobertura, subtipoCobert, estRegistro, codSistema,
compania, codUsuarioCreadorSistema, fecCreacionSistema,
codUsuarioUpdateSistema, fecUpdateSistema, codUsuarioCreador,
fecCreacion, codUsuarioUpdate, fecUpdate, BatchGroup
)
SELECT
idBeneficio, idGrupoBeneficio, idTipoCobertura, idSubtipoCobertura,
codBeneficio, descripcion, desResumida, codGrupoBeneficio,
codCobertura, subtipoCobert, estRegistro, codSistema,
compania, codUsuarioCreadorSistema, fecCreacionSistema,
codUsuarioUpdateSistema, fecUpdateSistema, codUsuarioCreador,
fecCreacion, codUsuarioUpdate, fecUpdate,
((ROW_NUMBER() OVER (ORDER BY idBeneficio) - 1) / @BatchSize) + 1
FROM [convenio].[Mae_Beneficio_Temp]
WHERE idBeneficio IS NOT NULL;

DECLARE @MaxBatchGroup INT;
SELECT @MaxBatchGroup = MAX(BatchGroup) FROM #Batch;

WHILE @BatchNumber <= @MaxBatchGroup
BEGIN
BEGIN TRANSACTION;

MERGE [convenio].[Mae_Beneficio] AS TARGET
USING (
SELECT * FROM #Batch WHERE BatchGroup = @BatchNumber
) AS SOURCE
ON TARGET.idBeneficio = SOURCE.idBeneficio

WHEN MATCHED AND (
ISNULL(TARGET.idGrupoBeneficio,'') != ISNULL(SOURCE.idGrupoBeneficio,'') OR
ISNULL(TARGET.idTipoCobertura,'') != ISNULL(SOURCE.idTipoCobertura,'') OR
ISNULL(TARGET.idSubtipoCobertura,'') != ISNULL(SOURCE.idSubtipoCobertura,'') OR
ISNULL(TARGET.codBeneficio,'') != ISNULL(SOURCE.codBeneficio,'') OR
ISNULL(TARGET.descripcion,'') != ISNULL(SOURCE.descripcion,'') OR
ISNULL(TARGET.desResumida,'') != ISNULL(SOURCE.desResumida,'') OR
ISNULL(TARGET.codGrupoBeneficio,'') != ISNULL(SOURCE.codGrupoBeneficio,'') OR
ISNULL(TARGET.codCobertura,'') != ISNULL(SOURCE.codCobertura,'') OR
ISNULL(TARGET.subtipoCobert,'') != ISNULL(SOURCE.subtipoCobert,'') OR
ISNULL(TARGET.estRegistro,'') != ISNULL(SOURCE.estRegistro,'') OR
ISNULL(TARGET.codSistema,'') != ISNULL(SOURCE.codSistema,'') OR
ISNULL(TARGET.compania,'') != ISNULL(SOURCE.compania,'') OR
ISNULL(TARGET.codUsuarioCreadorSistema,'') != ISNULL(SOURCE.codUsuarioCreadorSistema,'') OR
ISNULL(TARGET.fecCreacionSistema,'1900-01-01') != ISNULL(SOURCE.fecCreacionSistema,'1900-01-01') OR
ISNULL(TARGET.codUsuarioUpdateSistema,'') != ISNULL(SOURCE.codUsuarioUpdateSistema,'') OR
ISNULL(TARGET.fecUpdateSistema,'1900-01-01') != ISNULL(SOURCE.fecUpdateSistema,'1900-01-01') OR
ISNULL(TARGET.codUsuarioCreador,'') != ISNULL(SOURCE.codUsuarioCreador,'') OR
ISNULL(TARGET.fecCreacion,'1900-01-01') != ISNULL(SOURCE.fecCreacion,'1900-01-01') OR
ISNULL(TARGET.codUsuarioUpdate,'') != ISNULL(SOURCE.codUsuarioUpdate,'') OR
ISNULL(TARGET.fecUpdate,'1900-01-01') != ISNULL(SOURCE.fecUpdate,'1900-01-01')
) THEN
UPDATE SET
TARGET.idGrupoBeneficio = SOURCE.idGrupoBeneficio,
TARGET.idTipoCobertura = SOURCE.idTipoCobertura,
TARGET.idSubtipoCobertura = SOURCE.idSubtipoCobertura,
TARGET.codBeneficio = SOURCE.codBeneficio,
TARGET.descripcion = SOURCE.descripcion,
TARGET.desResumida = SOURCE.desResumida,
TARGET.codGrupoBeneficio = SOURCE.codGrupoBeneficio,
TARGET.codCobertura = SOURCE.codCobertura,
TARGET.subtipoCobert = SOURCE.subtipoCobert,
TARGET.estRegistro = SOURCE.estRegistro,
TARGET.codSistema = SOURCE.codSistema,
TARGET.compania = SOURCE.compania,
TARGET.codUsuarioCreadorSistema = SOURCE.codUsuarioCreadorSistema,
TARGET.fecCreacionSistema = SOURCE.fecCreacionSistema,
TARGET.codUsuarioUpdateSistema = SOURCE.codUsuarioUpdateSistema,
TARGET.fecUpdateSistema = SOURCE.fecUpdateSistema,
TARGET.codUsuarioCreador = SOURCE.codUsuarioCreador,
TARGET.fecCreacion = SOURCE.fecCreacion,
TARGET.codUsuarioUpdate = SOURCE.codUsuarioUpdate,
TARGET.fecUpdate = SOURCE.fecUpdate

WHEN NOT MATCHED BY TARGET THEN
INSERT (
idBeneficio, idGrupoBeneficio, idTipoCobertura, idSubtipoCobertura,
codBeneficio, descripcion, desResumida, codGrupoBeneficio,
codCobertura, subtipoCobert, estRegistro, codSistema,
compania, codUsuarioCreadorSistema, fecCreacionSistema,
codUsuarioUpdateSistema, fecUpdateSistema, codUsuarioCreador,
fecCreacion, codUsuarioUpdate, fecUpdate
)
VALUES (
SOURCE.idBeneficio, SOURCE.idGrupoBeneficio, SOURCE.idTipoCobertura, SOURCE.idSubtipoCobertura,
SOURCE.codBeneficio, SOURCE.descripcion, SOURCE.desResumida, SOURCE.codGrupoBeneficio,
SOURCE.codCobertura, SOURCE.subtipoCobert, SOURCE.estRegistro, SOURCE.codSistema,
SOURCE.compania, SOURCE.codUsuarioCreadorSistema, SOURCE.fecCreacionSistema,
SOURCE.codUsuarioUpdateSistema, SOURCE.fecUpdateSistema, SOURCE.codUsuarioCreador,
SOURCE.fecCreacion, SOURCE.codUsuarioUpdate, SOURCE.fecUpdate
);

COMMIT TRANSACTION;

SELECT @ProcessedRecords += COUNT(*) FROM #Batch WHERE BatchGroup = @BatchNumber;

IF @EnableLogging = 1
PRINT CONCAT(' Sub-lote ', @BatchNumber, '/', @MaxBatchGroup, ' completado. Procesados: ', @ProcessedRecords);

SET @BatchNumber += 1;
IF @BatchNumber <= @MaxBatchGroup
WAITFOR DELAY '00:00:00.010';
END;

DROP TABLE #Batch;
TRUNCATE TABLE [convenio].[Mae_Beneficio_Temp];

IF @EnableLogging = 1
PRINT ' Tabla Mae_Beneficio_Temp limpiada con TRUNCATE.';

DECLARE @Duration INT = DATEDIFF(MILLISECOND, @StartTime, SYSDATETIME());

PRINT CONCAT(' MERGE completado. Total: ', @TotalRecords, ', Tiempo: ', @Duration, ' ms, Promedio: ',
CASE WHEN @TotalRecords > 0 THEN @Duration / @TotalRecords ELSE 0 END, ' ms/reg');

SELECT
@TotalRecords AS TotalRecords,
@ProcessedRecords AS ProcessedRecords,
@Duration AS DurationMs,
CASE WHEN @TotalRecords > 0 THEN @Duration / @TotalRecords ELSE 0 END AS AvgMsPerRecord,
'SUCCESS' AS Status;

END TRY
BEGIN CATCH
IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
IF OBJECT_ID('tempdb..#Batch') IS NOT NULL DROP TABLE #Batch;

SET @ErrorMessage = CONCAT(' Error en sub-lote ', @BatchNumber, ': ', ERROR_MESSAGE(), ' (L√≠nea: ', ERROR_LINE(), ')');
PRINT @ErrorMessage;

IF OBJECT_ID('convenio.Mae_Log_Error_Merge') IS NOT NULL
BEGIN
INSERT INTO [convenio].[Mae_Log_Error_Merge] (
Procedimiento, TablaDestino, MensajeError, LineaError,
RegistrosProcesados, RegistrosTotales, Estado
)
VALUES (
'USP_PRO_DeltaBeneficio', @TablaDestino, ERROR_MESSAGE(),
ERROR_LINE(), @ProcessedRecords, @TotalRecords, 'ERROR'
);
END

SELECT
@ProcessedRecords AS ProcessedRecords,
@TotalRecords AS TotalRecords,
@ErrorMessage AS ErrorMessage,
'ERROR' AS Status;

THROW;
END CATCH;
END;


---
INSERT INTO [convenio].[Mae_Beneficio_Temp] (
idBeneficio, idGrupoBeneficio, idTipoCobertura, idSubtipoCobertura,
codBeneficio, descripcion, desResumida, codGrupoBeneficio,
codCobertura, subtipoCobert, estRegistro, codSistema, compania,
codUsuarioCreadorSistema, fecCreacionSistema, codUsuarioUpdateSistema,
fecUpdateSistema, codUsuarioCreador, fecCreacion, codUsuarioUpdate, fecUpdate
)
VALUES
('B001', 'G01', 'T01', 'ST01', 'CB001', 'Beneficio 1', 'B1', 'CG01', 'CC01', 'SC01', 'A', 'SYS1', 'COMP1',
'USR1', GETDATE(), NULL, NULL, 'USR1', GETDATE(), NULL, NULL),
('B002', 'G02', 'T02', 'ST02', 'CB002', 'Beneficio 2', 'B2', 'CG02', 'CC02', 'SC02', 'A', 'SYS1', 'COMP1',
'USR1', GETDATE(), NULL, NULL, 'USR1', GETDATE(), NULL, NULL);


EXEC [convenio].[USP_PRO_DeltaBeneficio]
@BatchSize = 5000,
@EnableLogging = 1;