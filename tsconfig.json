-- ===============================================
-- SCRIPTS DE OPTIMIZACIÓN PARA AZURE SQL DATABASE
-- Siguiendo estándares de Pacífico Salud
-- ===============================================

-- ✅ 1. ÍNDICES PRINCIPALES PARA LA CONSULTA DE DIAGNÓSTICOS-BENEFICIOS
-- Según nomenclatura EPS-DES-CMP-EST-BaseDeDatosAzureSQL.pdf

-- Índice principal para DiagnosticoBeneficio (tabla de relación)
CREATE NONCLUSTERED INDEX IX_DiagnosticoBeneficio_01
ON convenio.DiagnosticoBeneficio(idBeneficio, idDiagnostico, estRegistro)
INCLUDE (fecCreacionSistema);

-- Índice adicional para DiagnosticoBeneficio por diagnóstico
CREATE NONCLUSTERED INDEX IX_DiagnosticoBeneficio_02
ON convenio.DiagnosticoBeneficio(idDiagnostico, estRegistro)
INCLUDE (idBeneficio, fecCreacionSistema);

-- Índice principal para Diagnostico
CREATE NONCLUSTERED INDEX IX_Diagnostico_01
ON convenio.Diagnostico(estRegistro, codSistema)
INCLUDE (idDiagnostico, codDiagnostico, descripcionDiagnostico, desTipDiagnostico,
codGrupoDiagnostico, fecCreacionSistema, codDiagnosticoCie10);

-- Índice por código de diagnóstico
CREATE NONCLUSTERED INDEX IX_Diagnostico_02
ON convenio.Diagnostico(codDiagnostico, estRegistro)
INCLUDE (idDiagnostico, descripcionDiagnostico, codSistema);

-- Índice principal para Mae_Beneficio
CREATE NONCLUSTERED INDEX IX_Mae_Beneficio_01
ON convenio.Mae_Beneficio(estRegistro, compania, codSistema)
INCLUDE (idBeneficio, codBeneficio, descripcion, desResumida, codGrupoBeneficio);

-- Índice por código de beneficio
CREATE NONCLUSTERED INDEX IX_Mae_Beneficio_02
ON convenio.Mae_Beneficio(codBeneficio, estRegistro)
INCLUDE (idBeneficio, descripcion, desResumida, compania);

-- ✅ 2. VERIFICAR ESTADÍSTICAS Y FRAGMENTACIÓN
-- Actualizar estadísticas para mejorar el plan de ejecución
UPDATE STATISTICS convenio.DiagnosticoBeneficio WITH FULLSCAN;
UPDATE STATISTICS convenio.Diagnostico WITH FULLSCAN;
UPDATE STATISTICS convenio.Mae_Beneficio WITH FULLSCAN;

-- ✅ 3. VERIFICAR FRAGMENTACIÓN DE ÍNDICES
SELECT
OBJECT_NAME(ips.object_id) AS TableName,
i.name AS IndexName,
ips.index_type_desc,
ips.avg_fragmentation_in_percent,
ips.page_count,
CASE
WHEN ips.avg_fragmentation_in_percent > 30 THEN 'REBUILD RECOMENDADO'
WHEN ips.avg_fragmentation_in_percent > 10 THEN 'REORGANIZE RECOMENDADO'
ELSE 'OK'
END AS Recomendacion
FROM sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL, NULL, 'DETAILED') ips
INNER JOIN sys.indexes i ON ips.object_id = i.object_id AND ips.index_id = i.index_id
WHERE ips.avg_fragmentation_in_percent > 5
AND ips.page_count > 1000
AND OBJECT_NAME(ips.object_id) IN ('DiagnosticoBeneficio', 'Diagnostico', 'Mae_Beneficio')
ORDER BY ips.avg_fragmentation_in_percent DESC;

-- ✅ 4. MANTENIMIENTO DE ÍNDICES (Ejecutar según necesidad)
-- REORGANIZE para fragmentación moderada (10-30%)
ALTER INDEX IX_DiagnosticoBeneficio_01 ON convenio.DiagnosticoBeneficio REORGANIZE;
ALTER INDEX IX_Diagnostico_01 ON convenio.Diagnostico REORGANIZE;
ALTER INDEX IX_Mae_Beneficio_01 ON convenio.Mae_Beneficio REORGANIZE;

-- REBUILD para fragmentación alta (>30%) - USAR CON CUIDADO EN PRODUCCIÓN
-- ALTER INDEX IX_DiagnosticoBeneficio_01 ON convenio.DiagnosticoBeneficio REBUILD WITH (ONLINE = ON);

-- ✅ 5. VERIFICAR PLANES DE EJECUCIÓN PROBLEMÁTICOS
-- Consultar planes de ejecución costosos
SELECT TOP 10
qs.execution_count,
qs.total_elapsed_time / 1000000.0 AS total_elapsed_time_seconds,
qs.total_worker_time / 1000000.0 AS total_cpu_time_seconds,
qs.total_logical_reads,
qs.total_physical_reads,
SUBSTRING(qt.text, (qs.statement_start_offset/2)+1,
((CASE qs.statement_end_offset
WHEN -1 THEN DATALENGTH(qt.text)
ELSE qs.statement_end_offset
END - qs.statement_start_offset)/2)+1) AS statement_text
FROM sys.dm_exec_query_stats qs
CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) qt
WHERE qt.text LIKE '%DiagnosticoBeneficio%'
OR qt.text LIKE '%convenio.Diagnostico%'
OR qt.text LIKE '%Mae_Beneficio%'
ORDER BY qs.total_elapsed_time DESC;

-- ✅ 6. VERIFICAR ÍNDICES FALTANTES
SELECT
migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * (migs.user_seeks + migs.user_scans) AS improvement_measure,
'CREATE INDEX [missing_index_' + CONVERT(varchar, mig.index_group_handle) + '_' + CONVERT(varchar, mid.index_handle) + ']'
+ ' ON ' + mid.statement + ' (' + ISNULL(mid.equality_columns,'')
+ CASE WHEN mid.equality_columns IS NOT NULL AND mid.inequality_columns IS NOT NULL THEN ',' ELSE '' END
+ ISNULL(mid.inequality_columns, '') + ')'
+ ISNULL(' INCLUDE (' + mid.included_columns + ')', '') AS create_index_statement,
migs.user_seeks,
migs.user_scans,
migs.avg_total_user_cost,
migs.avg_user_impact
FROM sys.dm_db_missing_index_groups mig
INNER JOIN sys.dm_db_missing_index_group_stats migs ON migs.group_handle = mig.index_group_handle
INNER JOIN sys.dm_db_missing_index_details mid ON mig.index_handle = mid.index_handle
WHERE migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * (migs.user_seeks + migs.user_scans) > 10
AND (mid.statement LIKE '%DiagnosticoBeneficio%'
OR mid.statement LIKE '%Diagnostico%'
OR mid.statement LIKE '%Mae_Beneficio%')
ORDER BY improvement_measure DESC;

-- ✅ 7. CONFIGURACIÓN DE BASE DE DATOS OPTIMIZADA
-- Verificar configuración actual
SELECT
name,
value,
value_in_use,
description
FROM sys.configurations
WHERE name IN (
'max degree of parallelism',
'cost threshold for parallelism',
'optimize for ad hoc workloads'
);

-- ✅ 8. MONITOREO DE PERFORMANCE EN TIEMPO REAL
-- Consultas activas que están tardando más de 10 segundos
SELECT
r.session_id,
r.start_time,
r.status,
r.command,
r.total_elapsed_time / 1000.0 AS elapsed_seconds,
r.cpu_time / 1000.0 AS cpu_seconds,
r.logical_reads,
r.reads,
r.writes,
t.text AS query_text,
r.blocking_session_id,
r.wait_type,
r.wait_time / 1000.0 AS wait_seconds
FROM sys.dm_exec_requests r
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
WHERE r.total_elapsed_time > 10000 -- Más de 10 segundos
AND r.session_id != @@SPID
ORDER BY r.total_elapsed_time DESC;

-- ✅ 9. LIMPIEZA DE CACHE (Solo para troubleshooting en desarrollo)
-- ⚠️ NO EJECUTAR EN PRODUCCIÓN
-- DBCC FREEPROCCACHE;
-- DBCC DROPCLEANBUFFERS;

-- ✅ 10. VERIFICAR BLOQUEOS
SELECT
blocking.session_id AS blocking_session_id,
blocked.session_id AS blocked_session_id,
blocking_text.text AS blocking_text,
blocked_text.text AS blocked_text,
blocked.wait_type,
blocked.wait_time / 1000.0 AS wait_time_seconds
FROM sys.dm_exec_requests blocked
INNER JOIN sys.dm_exec_requests blocking ON blocked.blocking_session_id = blocking.session_id
CROSS APPLY sys.dm_exec_sql_text(blocking.sql_handle) blocking_text
CROSS APPLY sys.dm_exec_sql_text(blocked.sql_handle) blocked_text
WHERE blocked.blocking_session_id != 0;







SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [convenio].[DiagnosticoBeneficio](
	[idDiagnosticoBeneficio] [nvarchar](max) NULL,
	[idDiagnostico] [nvarchar](max) NULL,
	[idBeneficio] [nvarchar](max) NULL,
	[codDiagnostico] [nvarchar](max) NULL,
	[codBeneficio] [nvarchar](max) NULL,
	[codSistema] [nvarchar](max) NULL,
	[estRegistro] [nvarchar](max) NULL,
	[codUsuarioCreadorSistema] [nvarchar](max) NULL,
	[fecCreacionsSistema] [datetime] NULL,
	[codUsuarioUpdateSistema] [nvarchar](max) NULL,
	[fecUpdateSistema] [datetime] NULL,
	[codUsuarioCreador] [nvarchar](max) NULL,
	[fecCreacion] [datetime] NULL,
	[codUsuarioUpdate] [nvarchar](max) NULL,
	[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [convenio].[Diagnostico](
	[idDiagnostico] [nvarchar](max) NULL,
	[codDiagnostico] [nvarchar](max) NULL,
	[descripcionDiagnostico] [nvarchar](max) NULL,
	[desTipDiagnostico] [nvarchar](max) NULL,
	[codGrupoDiagnostico] [nvarchar](max) NULL,
	[nivelDiagnostico] [nvarchar](max) NULL,
	[codFrecuenciaDiagnostico] [int] NULL,
	[indBeneficioCompartido] [nvarchar](max) NULL,
	[indRequiereCartaGarantia] [nvarchar](max) NULL,
	[indBeneficioExclusivo] [nvarchar](max) NULL,
	[tipoPEAS] [nvarchar](max) NULL,
	[numVersion] [int] NULL,
	[sexoExclusivo] [nvarchar](max) NULL,
	[indDiagnosticoNoRepetible] [int] NULL,
	[codSistema] [nvarchar](max) NULL,
	[fecStatus] [datetime] NULL,
	[estRegistro] [nvarchar](max) NULL,
	[codUsuarioCreadorSistema] [nvarchar](max) NULL,
	[fecCreacionSistema] [datetime] NULL,
	[codUsuarioUpdateSistema] [nvarchar](max) NULL,
	[fecUpdateSistema] [datetime] NULL,
	[codUsuarioCreador] [nvarchar](max) NULL,
	[fecCreacion] [datetime] NULL,
	[codUsuarioUpdate] [nvarchar](max) NULL,
	[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [convenio].[Mae_Beneficio](
	[idBeneficio] [nvarchar](max) NULL,
	[idGrupoBeneficio] [nvarchar](max) NULL,
	[idTipoCobertura] [nvarchar](max) NULL,
	[idSubtipoCobertura] [nvarchar](max) NULL,
	[codBeneficio] [nvarchar](max) NULL,
	[descripcion] [nvarchar](max) NULL,
	[desResumida] [nvarchar](max) NULL,
	[codGrupoBeneficio] [nvarchar](max) NULL,
	[codCobertura] [nvarchar](max) NULL,
	[subtipoCobert] [nvarchar](max) NULL,
	[estRegistro] [nvarchar](max) NULL,
	[codSistema] [nvarchar](max) NULL,
	[compania] [nvarchar](max) NULL,
	[codUsuarioCreadorSistema] [nvarchar](max) NULL,
	[fecCreacionSistema] [datetime] NULL,
	[codUsuarioUpdateSistema] [nvarchar](max) NULL,
	[fecUpdateSistema] [datetime] NULL,
	[codUsuarioCreador] [nvarchar](max) NULL,
	[fecCreacion] [datetime] NULL,
	[codUsuarioUpdate] [nvarchar](max) NULL,
	[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [convenio].[Mae_TipoCobertura](
	[idTipoCobertura] [nvarchar](max) NULL,
	[codCobertura] [nvarchar](max) NULL,
	[descripcionTipo] [nvarchar](max) NULL,
	[estRegistro] [nvarchar](max) NULL,
	[codUsuarioCreador] [nvarchar](max) NULL,
	[fecCreacion] [datetime] NULL,
	[codUsuarioUpdate] [nvarchar](max) NULL,
	[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [convenio].[Mae_TipoCobertura](
	[idTipoCobertura] [nvarchar](max) NULL,
	[codCobertura] [nvarchar](max) NULL,
	[descripcionTipo] [nvarchar](max) NULL,
	[estRegistro] [nvarchar](max) NULL,
	[codUsuarioCreador] [nvarchar](max) NULL,
	[fecCreacion] [datetime] NULL,
	[codUsuarioUpdate] [nvarchar](max) NULL,
	[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [convenio].[GrupoBeneficio](
	[idGrupoBeneficio] [nvarchar](max) NULL,
	[codGrupoBeneficio] [nvarchar](max) NULL,
	[descripcionGrupoBeneficio] [nvarchar](max) NULL,
	[codSistema] [nvarchar](max) NULL,
	[estRegistro] [nvarchar](max) NULL,
	[fecStatus] [datetime] NULL,
	[codUsuarioCreadorSistema] [nvarchar](max) NULL,
	[fecCreacionsSistema] [datetime] NULL,
	[codUsuarioUpdateSistema] [nvarchar](max) NULL,
	[fecUpdateSistema] [datetime] NULL,
	[codUsuarioCreador] [nvarchar](max) NULL,
	[fecCreacion] [datetime] NULL,
	[codUsuarioUpdate] [nvarchar](max) NULL,
	[fecUpdate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

Solution: Optimize Schema & Query
Step 1: Fix Data Types
Change ID columns to fixed-length types to enable indexing:

sql
-- Convert MAX types to reasonable lengths (adjust lengths as needed)
ALTER TABLE convenio.DiagnosticoBeneficio
ALTER COLUMN idDiagnosticoBeneficio NVARCHAR(50);

ALTER TABLE convenio.DiagnosticoBeneficio
ALTER COLUMN idDiagnostico NVARCHAR(50);

ALTER TABLE convenio.DiagnosticoBeneficio
ALTER COLUMN idBeneficio NVARCHAR(50);

-- Repeat for other tables' ID columns
ALTER TABLE convenio.Diagnostico
ALTER COLUMN idDiagnostico NVARCHAR(50);

ALTER TABLE convenio.Mae_Beneficio
ALTER COLUMN idBeneficio NVARCHAR(50);
Step 2: Create Critical Indexes
sql
-- Indexes for DiagnosticoBeneficio (join table)
CREATE NONCLUSTERED INDEX IX_DiagBeneficio_Ids
ON convenio.DiagnosticoBeneficio (idBeneficio, idDiagnostico)
INCLUDE (estRegistro);

CREATE NONCLUSTERED INDEX IX_DiagBeneficio_Beneficio
ON convenio.DiagnosticoBeneficio (idBeneficio)
WHERE estRegistro = 'V';

-- Indexes for Diagnostico
CREATE NONCLUSTERED INDEX IX_Diagnostico_Filter
ON convenio.Diagnostico (idDiagnostico, codSistema)
INCLUDE (codDiagnostico, descripcionDiagnostico, estRegistro)
WHERE estRegistro = 'V' AND codSistema = 'NVS';

-- Indexes for Mae_Beneficio
CREATE NONCLUSTERED INDEX IX_Beneficio_Filter
ON convenio.Mae_Beneficio (idBeneficio, compania)
INCLUDE (codBeneficio, descripcion, desResumida, codGrupoBeneficio);
Step 3: Optimize the Query
sql
SELECT
d.idDiagnostico,
d.codDiagnostico,
d.descripcionDiagnostico,
-- ... (other columns) ...,
b.idBeneficio,
b.codBeneficio,
b.descripcion AS descripcionBeneficio
-- ... (other columns) ...
FROM convenio.DiagnosticoBeneficio db WITH (INDEX(IX_DiagBeneficio_Beneficio))
INNER JOIN convenio.Diagnostico d WITH (INDEX(IX_Diagnostico_Filter))
ON d.idDiagnostico = db.idDiagnostico
INNER JOIN convenio.Mae_Beneficio b WITH (INDEX(IX_Beneficio_Filter))
ON db.idBeneficio = b.idBeneficio
WHERE
db.idBeneficio IN (
'01JTGQEW5WM4CCMC4M74Q9AZ4T',
'01JTGQEW5WV9XKN57PJVHEW6VW',
'01JTGQEW5M3X3RQQPDY399WBK9',
'01JTGQEW5MMNTHQGB79Z4KACGX'
)
ORDER BY d.codDiagnostico, b.codBeneficio
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
Key Improvements:
Faster Joins: Fixed-length IDs allow efficient index seeks

Filtered Indexes: Reduce scanned rows using WHERE clauses

Covering Indexes: Include all selected columns to avoid key lookups

Query Hints: Force optimal index usage with WITH (INDEX(...))

Reduced I/O: Smaller data types decrease memory/page usage

Additional Recommendations:
Batch Processing: For large datasets, process in chunks:

sql
DECLARE @PageSize INT = 1000;
DECLARE @Page INT = 0;
WHILE (1=1)
BEGIN
SELECT ...
ORDER BY d.codDiagnostico
OFFSET @Page * @PageSize ROWS
FETCH NEXT @PageSize ROWS ONLY;

IF @@ROWCOUNT < @PageSize BREAK;
SET @Page += 1;
END
Monitor Performance:

sql
-- Check index usage
SELECT
object_name(object_id) AS TableName,
index_id,
user_seeks,
user_scans
FROM sys.dm_db_index_usage_stats
WHERE database_id = db_id();
Archive Old Data: Move historical records to separate tables.

These changes should reduce your query execution time from >15s to <100ms for typical cases.




BeneficioDiagnosticos-ssd/convenios-beneficio-diagnostico/v1.0.0/beneficios/diagnosticos","X-Correlation-Id":"789","X-Request-Id":"101112","usuarioAplicacion":"medico","nombreAplicacion":"mobile-app","procesoNegocio":"diagnostico-beneficio"},"res":{"statusCode":500},"err":{"type":"Error","message":"failed with status code 500","stack":"Error: failed with status code 500\n    at onResFinished (C:\\Users\\ext.jbecerrak.softte\\Desktop\\srv-ms-sm-ne-ods-consultaCovenios\\ne-ods-consultaConvenio\\node_modules\\pino-http\\logger.js:115:39)\n    at ServerResponse.onResponseComplete (C:\\Users\\ext.jbecerrak.softte\\Desktop\\srv-ms-sm-ne-ods-consultaCovenios\\ne-ods-consultaConvenio\\node_modules\\pino-http\\logger.js:178:14)\n    at ServerResponse.emit (node:events:530:35)\n    at onFinish (node:_http_outgoing:1005:10)\n    at callback (node:internal/streams/writable:756:21)\n    at afterWrite (node:internal/streams/writable:701:5)\n    at afterWriteTick (node:internal/streams/writable:687:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)"},"responseTime":15246,"msg":"request errored"}
query failed:
      SELECT
          -- Datos del diagnóstico
          d.idDiagnostico,
          d.codDiagnostico,
          d.descripcionDiagnostico,
          d.desTipDiagnostico,
          d.codGrupoDiagnostico,
          d.estRegistro as estadoRegistroDiagnostico,
          d.codSistema as codigoSistemaDiagnostico,
          d.fecCreacionSistema as fechaCreacionDiagnostico,
          --d.codDiagnosticoCie10,

          -- Datos del beneficio
          b.idBeneficio,
          b.codBeneficio,
          b.descripcion as descripcionBeneficio,
          b.desResumida as nombreBeneficio,
          b.codGrupoBeneficio,
          b.estRegistro as estadoRegistroBeneficio,
          b.codSistema as codigoSistemaBeneficio,
          b.compania as companiaBeneficio,

          -- Datos de la relación
          db.estRegistro as estadoRelacion,
          db.fecCreacionsSistema as fechaAsociacion

      FROM convenio.Diagnostico d
      INNER JOIN convenio.DiagnosticoBeneficio db ON d.idDiagnostico = db.idDiagnostico
      INNER JOIN convenio.Mae_Beneficio b ON db.idBeneficio = b.idBeneficio
      WHERE db.idBeneficio IN ('01JTGQEW5WM4CCMC4M74Q9AZ4T', '01JTGQEW5WV9XKN57PJVHEW6VW', '01JTGQEW5M3X3RQQPDY399WBK9', '01JTGQEW5MMNTHQGB79Z4KACGX') AND db.estRegistro = 'V' AND d.estRegistro = 'V' AND d.codSistema = 'NVS' AND b.compania = '20002'     
      ORDER BY d.codDiagnostico, b.codBeneficio
      OFFSET 0 ROWS
      FETCH NEXT 10 ROWS ONLY

error: QueryFailedError: Error: Timeout: Request failed to complete in 15000ms
